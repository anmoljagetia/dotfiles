[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "def" : "TextClipboardHistory.frequency",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.frequency",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "name" : "frequency"
      },
      {
        "doc" : "How many items to keep on history. Defaults to 100",
        "def" : "TextClipboardHistory.hist_size",
        "parameters" : [

        ],
        "stripped_doc" : [
          "How many items to keep on history. Defaults to 100"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.hist_size",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "How many items to keep on history. Defaults to 100",
        "name" : "hist_size"
      },
      {
        "doc" : "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http:\/\/nspasteboard.org. Defaults to `true`",
        "def" : "TextClipboardHistory.honor_ignoredidentifiers",
        "parameters" : [

        ],
        "stripped_doc" : [
          "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http:\/\/nspasteboard.org. Defaults to `true`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.honor_ignoredidentifiers",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http:\/\/nspasteboard.org. Defaults to `true`",
        "name" : "honor_ignoredidentifiers"
      },
      {
        "doc" : "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "def" : "TextClipboardHistory.paste_on_select",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.paste_on_select",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "name" : "paste_on_select"
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "def" : "TextClipboardHistory.logger",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name" : "logger"
      },
      {
        "doc" : "Types of clipboard entries to ignore, see http:\/\/nspasteboard.org. Code from https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua. Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "def" : "TextClipboardHistory.ignoredIdentifiers",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Types of clipboard entries to ignore, see http:\/\/nspasteboard.org. Code from https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua. Default value (don't modify unless you know what you are doing):",
          "```",
          " {",
          "    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler",
          "    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me",
          "    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator",
          "    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password",
          "    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient",
          "    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed",
          "    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic",
          " }",
          "```"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.ignoredIdentifiers",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Types of clipboard entries to ignore, see http:\/\/nspasteboard.org. Code from https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua. Default value (don't modify unless you know what you are doing):",
        "name" : "ignoredIdentifiers"
      },
      {
        "doc" : "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "def" : "TextClipboardHistory.deduplicate",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.deduplicate",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "name" : "deduplicate"
      },
      {
        "doc" : "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "def" : "TextClipboardHistory.show_in_menubar",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Whether to show a menubar item to open the clipboard history. Defaults to `true`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.show_in_menubar",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "name" : "show_in_menubar"
      },
      {
        "doc" : "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https:\/\/codepoints.net\/U+1F4CE)",
        "def" : "TextClipboardHistory.menubar_title",
        "parameters" : [

        ],
        "stripped_doc" : [
          "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https:\/\/codepoints.net\/U+1F4CE)"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.menubar_title",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https:\/\/codepoints.net\/U+1F4CE)",
        "name" : "menubar_title"
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "Keep a history of the clipboard, only for text entries",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "doc" : "Keep a history of the clipboard, only for text entries\n\nOriginally based on [code by VFS](https:\/\/github.com\/VFS\/.hammerspoon\/blob\/master\/tools\/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua).\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/TextClipboardHistory.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/TextClipboardHistory.spoon.zip)",
    "Method" : [
      {
        "doc" : "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "def" : "TextClipboardHistory:togglePasteOnSelect()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Toggle the value of `TextClipboardHistory.paste_on_select`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:togglePasteOnSelect()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "name" : "togglePasteOnSelect"
      },
      {
        "doc" : "Clears the clipboard and history",
        "def" : "TextClipboardHistory:clearAll()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Clears the clipboard and history"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:clearAll()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Clears the clipboard and history",
        "name" : "clearAll"
      },
      {
        "doc" : "Clears the last added to the history",
        "def" : "TextClipboardHistory:clearLastItem()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Clears the last added to the history"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:clearLastItem()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Clears the last added to the history",
        "name" : "clearLastItem"
      },
      {
        "doc" : "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "def" : "TextClipboardHistory:pasteboardToClipboard(item)",
        "parameters" : [
          " * item - string to add to the clipboard history",
          ""
        ],
        "stripped_doc" : [
          "Add the given string to the history",
          ""
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:pasteboardToClipboard(item)",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "desc" : "Add the given string to the history",
        "name" : "pasteboardToClipboard"
      },
      {
        "doc" : "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "def" : "TextClipboardHistory:shouldBeStored()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:shouldBeStored()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "name" : "shouldBeStored"
      },
      {
        "doc" : "If the pasteboard has changed, we add the current item to our history and update the counter",
        "def" : "TextClipboardHistory:checkAndStorePasteboard()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "If the pasteboard has changed, we add the current item to our history and update the counter"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:checkAndStorePasteboard()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "If the pasteboard has changed, we add the current item to our history and update the counter",
        "name" : "checkAndStorePasteboard"
      },
      {
        "doc" : "Start the clipboard history collector",
        "def" : "TextClipboardHistory:start()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Start the clipboard history collector"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:start()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Start the clipboard history collector",
        "name" : "start"
      },
      {
        "doc" : "Display the current clipboard list in a chooser",
        "def" : "TextClipboardHistory:showClipboard()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Display the current clipboard list in a chooser"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:showClipboard()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Display the current clipboard list in a chooser",
        "name" : "showClipboard"
      },
      {
        "doc" : "Show\/hide the clipboard list, depending on its current state",
        "def" : "TextClipboardHistory:toggleClipboard()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Show\/hide the clipboard list, depending on its current state"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:toggleClipboard()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Show\/hide the clipboard list, depending on its current state",
        "name" : "toggleClipboard"
      },
      {
        "doc" : "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier\/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show\/hide the clipboard history chooser",
        "def" : "TextClipboardHistory:bindHotkeys(mapping)",
        "parameters" : [
          " * mapping - A table containing hotkey objifier\/key details for the following items:",
          "  * show_clipboard - Display the clipboard history chooser",
          "  * toggle_clipboard - Show\/hide the clipboard history chooser"
        ],
        "stripped_doc" : [
          "Binds hotkeys for TextClipboardHistory",
          ""
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for TextClipboardHistory",
        "name" : "bindHotkeys"
      }
    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "def" : "TextClipboardHistory.deduplicate",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.deduplicate",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "name" : "deduplicate"
      },
      {
        "doc" : "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "def" : "TextClipboardHistory.frequency",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.frequency",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "name" : "frequency"
      },
      {
        "doc" : "How many items to keep on history. Defaults to 100",
        "def" : "TextClipboardHistory.hist_size",
        "parameters" : [

        ],
        "stripped_doc" : [
          "How many items to keep on history. Defaults to 100"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.hist_size",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "How many items to keep on history. Defaults to 100",
        "name" : "hist_size"
      },
      {
        "doc" : "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http:\/\/nspasteboard.org. Defaults to `true`",
        "def" : "TextClipboardHistory.honor_ignoredidentifiers",
        "parameters" : [

        ],
        "stripped_doc" : [
          "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http:\/\/nspasteboard.org. Defaults to `true`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.honor_ignoredidentifiers",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http:\/\/nspasteboard.org. Defaults to `true`",
        "name" : "honor_ignoredidentifiers"
      },
      {
        "doc" : "Types of clipboard entries to ignore, see http:\/\/nspasteboard.org. Code from https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua. Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "def" : "TextClipboardHistory.ignoredIdentifiers",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Types of clipboard entries to ignore, see http:\/\/nspasteboard.org. Code from https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua. Default value (don't modify unless you know what you are doing):",
          "```",
          " {",
          "    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler",
          "    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me",
          "    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator",
          "    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password",
          "    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient",
          "    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed",
          "    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic",
          " }",
          "```"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.ignoredIdentifiers",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Types of clipboard entries to ignore, see http:\/\/nspasteboard.org. Code from https:\/\/github.com\/asmagill\/hammerspoon-config\/blob\/master\/utils\/_menus\/newClipper.lua. Default value (don't modify unless you know what you are doing):",
        "name" : "ignoredIdentifiers"
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "def" : "TextClipboardHistory.logger",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name" : "logger"
      },
      {
        "doc" : "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https:\/\/codepoints.net\/U+1F4CE)",
        "def" : "TextClipboardHistory.menubar_title",
        "parameters" : [

        ],
        "stripped_doc" : [
          "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https:\/\/codepoints.net\/U+1F4CE)"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.menubar_title",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https:\/\/codepoints.net\/U+1F4CE)",
        "name" : "menubar_title"
      },
      {
        "doc" : "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "def" : "TextClipboardHistory.paste_on_select",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`."
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.paste_on_select",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "name" : "paste_on_select"
      },
      {
        "doc" : "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "def" : "TextClipboardHistory.show_in_menubar",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Whether to show a menubar item to open the clipboard history. Defaults to `true`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory.show_in_menubar",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "name" : "show_in_menubar"
      },
      {
        "doc" : "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier\/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show\/hide the clipboard history chooser",
        "def" : "TextClipboardHistory:bindHotkeys(mapping)",
        "parameters" : [
          " * mapping - A table containing hotkey objifier\/key details for the following items:",
          "  * show_clipboard - Display the clipboard history chooser",
          "  * toggle_clipboard - Show\/hide the clipboard history chooser"
        ],
        "stripped_doc" : [
          "Binds hotkeys for TextClipboardHistory",
          ""
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for TextClipboardHistory",
        "name" : "bindHotkeys"
      },
      {
        "doc" : "If the pasteboard has changed, we add the current item to our history and update the counter",
        "def" : "TextClipboardHistory:checkAndStorePasteboard()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "If the pasteboard has changed, we add the current item to our history and update the counter"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:checkAndStorePasteboard()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "If the pasteboard has changed, we add the current item to our history and update the counter",
        "name" : "checkAndStorePasteboard"
      },
      {
        "doc" : "Clears the clipboard and history",
        "def" : "TextClipboardHistory:clearAll()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Clears the clipboard and history"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:clearAll()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Clears the clipboard and history",
        "name" : "clearAll"
      },
      {
        "doc" : "Clears the last added to the history",
        "def" : "TextClipboardHistory:clearLastItem()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Clears the last added to the history"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:clearLastItem()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Clears the last added to the history",
        "name" : "clearLastItem"
      },
      {
        "doc" : "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "def" : "TextClipboardHistory:pasteboardToClipboard(item)",
        "parameters" : [
          " * item - string to add to the clipboard history",
          ""
        ],
        "stripped_doc" : [
          "Add the given string to the history",
          ""
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:pasteboardToClipboard(item)",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "desc" : "Add the given string to the history",
        "name" : "pasteboardToClipboard"
      },
      {
        "doc" : "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "def" : "TextClipboardHistory:shouldBeStored()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:shouldBeStored()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "name" : "shouldBeStored"
      },
      {
        "doc" : "Display the current clipboard list in a chooser",
        "def" : "TextClipboardHistory:showClipboard()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Display the current clipboard list in a chooser"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:showClipboard()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Display the current clipboard list in a chooser",
        "name" : "showClipboard"
      },
      {
        "doc" : "Start the clipboard history collector",
        "def" : "TextClipboardHistory:start()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Start the clipboard history collector"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:start()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Start the clipboard history collector",
        "name" : "start"
      },
      {
        "doc" : "Show\/hide the clipboard list, depending on its current state",
        "def" : "TextClipboardHistory:toggleClipboard()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Show\/hide the clipboard list, depending on its current state"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:toggleClipboard()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Show\/hide the clipboard list, depending on its current state",
        "name" : "toggleClipboard"
      },
      {
        "doc" : "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "def" : "TextClipboardHistory:togglePasteOnSelect()",
        "parameters" : [

        ],
        "stripped_doc" : [
          "Toggle the value of `TextClipboardHistory.paste_on_select`"
        ],
        "notes" : [

        ],
        "signature" : "TextClipboardHistory:togglePasteOnSelect()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "name" : "togglePasteOnSelect"
      }
    ],
    "Command" : [

    ],
    "name" : "TextClipboardHistory"
  }
]